// Bootstrap alerts.
html[data-theme=dark] {

    // Generate contextual modifier classes for colorizing the alert.
    @each $state,
    $value in $theme-colors {
        $alert-background: shift-color($value, -$alert-bg-scale);
        $alert-border: shift-color($value, -$alert-border-scale);
        $alert-color: shift-color($value, -10% - $alert-color-scale);

        @if (contrast-ratio($alert-background, $alert-color) < $min-contrast-ratio) {
            $alert-color: mix($value, color-contrast($alert-background), abs($alert-color-scale));
        }

        .alert-#{$state} {
            --#{$prefix}alert-color: #{$alert-color};
            --#{$prefix}alert-bg: #{$alert-background};
            --#{$prefix}alert-border-color: #{$alert-border};
            --#{$prefix}alert-link-color: #{shade-color($alert-color, 20%)};

            @if $enable-gradients {
                background-image: var(--#{$prefix}gradient);
            }

            .alert-link {
                color: var(--#{$prefix}alert-link-color);
            }

            :not(pre) > code {
                color: color-mix(in srgb, var(--bs-code-color) 75%, #{shift-color($alert-color, -60%)} 25%);
            }

            strong {
                --bold-color: color-mix(in srgb, #{$alert-color} 80%, #fff 20%);
            }
        }
    }

    .alert-secondary {
        --bs-alert-bg: var(--light-background-color);
    }
}

html[data-theme=light] {
    .alert strong {
        // color: color-mix(in srgb, #{$alert-color} 80%, #fff 20%);
        --bold-color: var(--bs-alert-color);
    }
}


@include media-breakpoint-down(sm) {
    .alert i[class*="fa-"] {
        margin-left: -1.7rem !important;
    }
    .alert i.fa-lightbulb {
        margin-left: -1.5rem !important;
    }
}

.alert-content {
    overflow-x: auto;
    overflow-y: hidden;

    & > ul,
    & > ol {
        padding-left: $space-threehalves;
    }
}
