document.addEventListener('keydown', function(event) {
  if((event.ctrlKey || event.metaKey) && event.key === 'k') {
    event.preventDefault();
    $("#search-modal").modal('show');
  }
});

$(() => {
  /* Scroll Progress */
  $(document).on('scroll', () => {
    const docElem = document.documentElement;
    const docBody = document.body;
    const scrollTop = (docBody.scrollTop || docElem.scrollTop);
    const height = docElem.scrollHeight - docElem.clientHeight;

    const progressBar = document.querySelector('#scroll-progress-bar');
    const progress = scrollTop / height * 100;
    progressBar.style.setProperty('--progress', `${Math.max(progress, 0)}%`);
  });

  /* Scroll to Top */
  const btnBackToTop = $('#btn-back-to-top');
  function check() {
    if ($(this).scrollTop() > 250)
      btnBackToTop.fadeIn();
    else
      btnBackToTop.fadeOut();
  }

  $(window).on('scroll', () => {
    check();
  });

  check(); // Check on doc ready, e.g. if page was reloaded, we could already be in the middle of the page.

  btnBackToTop.on('click', () => {
    document.body.scrollTop = 0;
    document.documentElement.scrollTop = 0;
  });

  /* Load Tooltips */
  const tooltips = document.querySelectorAll('[data-bs-toggle="tooltip"]');
  [...tooltips].forEach(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));

  // Load SoundCloud embeds (dynamic src).
  const visual = $(window).width() < 600;

  const options = {
    rootMargin: "300px", // Lazy-load when the iframe is 300px away from the viewport.
    threshold: 0,
  };

  // Set up an intersection observer to detect when tracks are nearly visible.
  const trackObserver = new IntersectionObserver((entries, observer) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const track = entry.target;
        console.log('loading a track');
        let src = track.dataset.src;
        if (visual)
          src += '&visual=true'; // Compressed view, more suitable for small screens.
        track.src = src;
        track.classList.remove("lazy");
        observer.unobserve(track);
      }
    });
  }, options);

  // Observe tracks for lazy loading.
  const tracks = document.querySelectorAll(".soundcloud-track.lazy");
  tracks.forEach(e => trackObserver.observe(e));

  // Carousel auto-label update.
  $('.carousel').each(function () {
    // Update labels on slide.
    const id = $(this).attr('id');
    $(this).on('slide.bs.carousel', (event) => {
      $(`#${id}-tab${event.from + 1}-label`).removeClass('bg-primary text-white');
      $(`#${id}-tab${event.to + 1}-label`).addClass('bg-primary text-white');
    });
  });

  {% if site.lightbox.enabled %}
  const lightboxCommonOptions = {
    type: 'image',
    fixedContentPos: false,
    mainClass: 'mfp-with-zoom',
    callbacks: {
      open() {
        $('body').addClass('noscroll');
      },
      close() {
        $('body').removeClass('noscroll');
      },
    },
    zoom: {
      enabled: true,
      duration: 300, // Duration of the effect, in milliseconds.
      easing: 'ease-in-out', // CSS transition easing function.
    },
  };

  {% if site.lightbox.combined %}
  
  $('.lightbox-single, .lightbox-gallery > a').magnificPopup({
    gallery: {
      enabled: true,
    },
    ...lightboxCommonOptions,
  });

  {% else %}

  $('.lightbox-single').magnificPopup({
    ...lightboxCommonOptions,
  });

  $('.lightbox-gallery').each(function () {
    $(this).find('a').magnificPopup({
      gallery: {
        enabled: true,
      },
      ...lightboxCommonOptions,
    });
  });
  
  {% endif %}
  {% endif %}

  {% if site.banner.enabled %}
  const root = document.querySelector(':root');
  const bannerHeight = $('#banner').outerHeight();
  if (bannerHeight)
    root.style.setProperty('--header-extra', bannerHeight + 'px');

  $('#banner .btn-close').on('click', () => {
    {% if site.banner.scope %}
    {{ site.banner.scope + 'Storage' | safe }}.setItem('bannerClosed', true);
    {% endif %}

    const b = $('#banner');
    b.css('max-height', b.outerHeight());
    root.style.setProperty('--header-extra', '0px');
    window.requestAnimationFrame(() => b.addClass('collapsed'));
    setTimeout(() => {
      b.addClass('d-none');
    }, 600);
  });
  {% endif %}
});
